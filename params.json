{"name":"Property-accessors","tagline":"A mixin for declaring fancy property accessors","body":"# Property Accessors\r\n\r\nA mixin for defining fancy dynamic properties.\r\n\r\n## Basic Usage\r\n\r\nTo define a basic property accessor, use the `accessor` declaration. If you've\r\nincluded the mixin into a class, you define a prototype property by calling\r\n`@::accessor` on its prototype.\r\n\r\n```coffee\r\nPropertyAccessors = require 'property-accessors'\r\n\r\nclass Vehicle\r\n  PropertyAccessors.includeInto(this)\r\n  \r\n  @::accessor 'type', ->\r\n    get: ->\r\n      switch @doorCount\r\n        when 4 then 'sedan' # i know this isn't strictly accurate\r\n        when 2 then 'coupe'\r\n    set: (type) ->\r\n      switch type\r\n        when 'sedan' then @doorCount = 4\r\n        when 'coupe' then @doorCount = 2\r\n\r\ncar = new Vehicle\r\ncar.doorCount = 2\r\ncar.type # => 'coupe'\r\n```\r\n\r\nYou can define a class-level property by *extending* with the mixin rather than\r\nincluding it (which extends the prototype).\r\n\r\n```coffee\r\nclass Vehicle\r\n  PropertyAccessors.extend(this)\r\n  \r\n  @accessor 'vehicleCount', get: -> @allVehicles.length  \r\n```\r\n\r\nYou can just pass a single function if you only want to define a getter:\r\n\r\n```coffee\r\nclass Vehicle\r\n  PropertyAccessors.includeInto(this)\r\n  \r\n  @::accessor 'type', -> # ...\r\n```\r\n\r\n## Fancy Usage\r\n\r\n### Lazy Accessors\r\n\r\nLazy accessors call a function the first time a property is accessed. You are\r\nstill free to overwrite this value by assigning the property explicitly.\r\n\r\n```coffee\r\nclass ScienceLab\r\n  PropertyAccessors.includeInto(this)\r\n  \r\n  @::lazyAccessor 'crazyComputation', -> computeCrazyComputation()\r\n```\r\n\r\n### Advised Accessors\r\n\r\nAdvised accessors allow you to call code before the reading or writing of a\r\nproperty value. If a property is being assigned, your advice function is called\r\nwith the value being assigned and the old value.\r\n\r\n```coffee\r\nclass SpyStation\r\n  @advisedAccessor 'online',\r\n    get: -> @ensureAllSystemsNominal()\r\n    set: -> @ensureUserIsSpy()\r\n\r\nstation = new SpyStation\r\nstation.online = true # ensures user is a spy, then assigns true\r\nstation.online # ensures all systems are nominal, then returns true\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}